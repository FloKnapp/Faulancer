<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src" full="Faulancer\Exception\Exception" namespace="Faulancer\Exception" name="Exception" abstract="false" final="false" start="12" end="16">
  <file path="/var/www/vhosts/faulancer/src/Exception" file="Exception.php" realpath="/var/www/vhosts/faulancer/src/Exception/Exception.php" size="264" time="2017-10-25T22:04:36+00:00" unixtime="1508969076" sha1="72a1c22fca8748b74061c9eff643aa19427cf55e" relative="Exception/Exception.php"/>
  <docblock>
    <description compact="Class Exception"/>
  </docblock>
  <extends full="Exception" namespace="" name="Exception"/>
  <member name="httpStatus" default="200" type="integer" visibility="protected" static="false" line="14"/>
  <extenders>
    <extender full="Faulancer\Exception\ConstantMissingException" namespace="Faulancer\Exception" name="ConstantMissingException"/>
    <extender full="Faulancer\Exception\ServiceNotFoundException" namespace="Faulancer\Exception" name="ServiceNotFoundException"/>
    <extender full="Faulancer\Exception\ViewHelperException" namespace="Faulancer\Exception" name="ViewHelperException"/>
    <extender full="Faulancer\Exception\PluginException" namespace="Faulancer\Exception" name="PluginException"/>
    <extender full="Faulancer\Exception\LogFileInvalidException" namespace="Faulancer\Exception" name="LogFileInvalidException"/>
    <extender full="Faulancer\Exception\FileIncludeException" namespace="Faulancer\Exception" name="FileIncludeException"/>
    <extender full="Faulancer\Exception\InvalidArgumentException" namespace="Faulancer\Exception" name="InvalidArgumentException"/>
    <extender full="Faulancer\Exception\KernelException" namespace="Faulancer\Exception" name="KernelException"/>
    <extender full="Faulancer\Exception\DispatchFailureException" namespace="Faulancer\Exception" name="DispatchFailureException"/>
    <extender full="Faulancer\Exception\ViewHelperIncompatibleException" namespace="Faulancer\Exception" name="ViewHelperIncompatibleException"/>
    <extender full="Faulancer\Exception\RouteInvalidException" namespace="Faulancer\Exception" name="RouteInvalidException"/>
    <extender full="Faulancer\Exception\IncompatibleResponseException" namespace="Faulancer\Exception" name="IncompatibleResponseException"/>
    <extender full="Faulancer\Exception\FileNotFoundException" namespace="Faulancer\Exception" name="FileNotFoundException"/>
    <extender full="Faulancer\Exception\LogTypeNotSupportedException" namespace="Faulancer\Exception" name="LogTypeNotSupportedException"/>
    <extender full="Faulancer\Exception\FactoryMayIncompatibleException" namespace="Faulancer\Exception" name="FactoryMayIncompatibleException"/>
    <extender full="Faulancer\Exception\MethodNotFoundException" namespace="Faulancer\Exception" name="MethodNotFoundException"/>
    <extender full="Faulancer\Exception\ClassNotFoundException" namespace="Faulancer\Exception" name="ClassNotFoundException"/>
    <extender full="Faulancer\Exception\SecurityException" namespace="Faulancer\Exception" name="SecurityException"/>
    <extender full="Faulancer\Exception\ConfigInvalidException" namespace="Faulancer\Exception" name="ConfigInvalidException"/>
  </extenders>
  <parent full="Exception" namespace="" name="Exception">
    <member name="message" static="false" visibility="protected">
    <default>null</default>
    <docblock>
      <description compact="The exception message"/>
      <var type="string"/>
    </docblock>
  </member>
    <member name="code" static="false" visibility="protected">
    <default>null</default>
    <docblock>
      <description compact="The exception code"/>
      <var type="int"/>
    </docblock>
  </member>
    <member name="file" static="false" visibility="protected">
    <default>null</default>
    <docblock>
      <description compact="The filename where the exception was created"/>
      <var type="string"/>
    </docblock>
  </member>
    <member name="line" static="false" visibility="protected">
    <default>null</default>
    <docblock>
      <description compact="The line where the exception was created"/>
      <var type="int"/>
    </docblock>
  </member>
    <constructor name="__construct" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Construct the exception"/>
      <return type="void"/>
    </docblock>
    <parameter name="message" optional="true" byreference="false" type="string"/>
    <parameter name="code" optional="true" byreference="false" type="int"/>
    <parameter name="previous" optional="true" byreference="false" type="object" class="Throwable"/>
  </constructor>
    <method name="getMessage" abstract="false" static="false" visibility="public" final="true">
    <docblock>
      <description compact="Gets the Exception message"/>
      <return type="string"/>
    </docblock>
  </method>
    <method name="getPrevious" abstract="false" static="false" visibility="public" final="true">
    <docblock>
      <description compact="Returns previous Exception"/>
      <return type="Throwable"/>
    </docblock>
  </method>
    <method name="getCode" abstract="false" static="false" visibility="public" final="true">
    <docblock>
      <description compact="Gets the Exception code"/>
      <return type="mixed"/>
    </docblock>
  </method>
    <method name="getFile" abstract="false" static="false" visibility="public" final="true">
    <docblock>
      <description compact="Gets the file in which the exception was created"/>
      <return type="string"/>
    </docblock>
  </method>
    <method name="getLine" abstract="false" static="false" visibility="public" final="true">
    <docblock>
      <description compact="Gets the line in which the exception was created"/>
      <return type="int"/>
    </docblock>
  </method>
    <method name="getTrace" abstract="false" static="false" visibility="public" final="true">
    <docblock>
      <description compact="Gets the stack trace"/>
      <return type="array"/>
    </docblock>
  </method>
    <method name="getTraceAsString" abstract="false" static="false" visibility="public" final="true">
    <docblock>
      <description compact="Gets the stack trace as a string"/>
      <return type="string"/>
    </docblock>
  </method>
    <method name="__toString" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="String representation of the exception"/>
      <return type="string"/>
    </docblock>
  </method>
  </parent>
</class>
